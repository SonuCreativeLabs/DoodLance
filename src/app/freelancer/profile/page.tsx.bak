"use client"

import { useState } from 'react';
import Image from 'next/image';

// UI Components
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea";

// Icons
import { 
  Briefcase, 
  Star, 
  MessageSquare, 
  CheckCircle,
  Edit2,
  Plus,
  X,
  Clock,
  User
} from "lucide-react";

// Types
type Service = {
  id: number;
  title: string;
  type: 'online' | 'offline';
  price: string;
  description: string;
  deliveryTime: string;
  features: string[];
  revisions?: number;
};

type PortfolioItem = {
  id: number;
  title: string;
  category: string;
  image: string;
};

type Review = {
  id: number;
  author: string;
  rating: number;
  date: string;
  comment: string;
};

type Availability = {
  day: string;
  available: boolean;
};

type FreelancerData = {
  name: string;
  title: string;
  rating: number;
  reviewCount: number;
  location: string;
  online: boolean;
  memberSince: string;
  responseTime: string;
  deliveryTime: string;
  completionRate: number;
  jobsCompleted: number;
  skills: string[];
  about: string;
  services: Service[];
  portfolio: PortfolioItem[];
  clientReviews: Review[];
  availability: Availability[];
};

// Mock data - Replace with actual data from your backend
const freelancerData: FreelancerData = {
  name: "Alex Johnson",
  title: "Senior UI/UX Designer & Frontend Developer",
  rating: 4.9,
  reviewCount: 128,
  location: "New York, USA",
  online: true,
  memberSince: "2020",
  responseTime: "1 hour",
  deliveryTime: "3 days",
  completionRate: 98,
  jobsCompleted: 245,
  skills: ["UI/UX Design", "Figma", "React", "Web Design", "Mobile Design", "Prototyping"],
  about: "Award-winning UI/UX designer with 8+ years of experience creating beautiful and functional digital experiences. I specialize in user-centered design and frontend development.",
  services: [
    {
      id: 1,
      title: "UI/UX Design",
      type: "online",
      price: "$500",
      description: "Custom UI/UX design for your web or mobile application.",
      deliveryTime: "7 days",
      revisions: 3,
      features: ["Responsive Design", "Wireframes", "Prototype", "Source Files"]
    },
    {
      id: 2,
      title: "Website Redesign",
      type: "online",
      price: "$800",
      description: "Complete website redesign with modern UI/UX principles.",
      deliveryTime: "10 days",
      revisions: 2,
      features: ["Fully Responsive", "SEO Optimized", "3 Revisions", "1 Month Support"]
    },
    {
      id: 3,
      title: "In-Person Consultation",
      type: "offline",
      price: "$100/hour",
      description: "On-site consultation for your design needs in the New York area.",
      deliveryTime: "Flexible",
      features: ["2 Hours Minimum", "In-Person Meeting", "Detailed Report"]
    }
  ],
  portfolio: [
    { id: 1, title: "E-commerce Redesign", category: "Web Design", image: "/placeholder-portfolio-1.jpg" },
    { id: 2, title: "Mobile App UI", category: "Mobile Design", image: "/placeholder-portfolio-2.jpg" },
    { id: 3, title: "Brand Identity", category: "Branding", image: "/placeholder-portfolio-3.jpg" },
  ],
  clientReviews: [
    { id: 1, author: "Sarah M.", rating: 5, date: "2 weeks ago", comment: "Amazing work! Delivered exactly what I needed ahead of schedule." },
    { id: 2, author: "James L.", rating: 5, date: "1 month ago", comment: "Great communication and professional results. Highly recommended!" },
  ],
  availability: [
    { day: "Mon", available: true },
    { day: "Tue", available: true },
    { day: "Wed", available: true },
    { day: "Thu", available: true },
    { day: "Fri", available: true },
    { day: "Sat", available: false },
    { day: "Sun", available: false },
  ]
};

// TabPanel component for conditional rendering of tabs
interface TabPanelProps {
  children: React.ReactNode;
  value: string;
  currentValue: string;
}

const TabPanel = ({ children, value, currentValue }: TabPanelProps) => (
  <div className={value === currentValue ? 'block' : 'hidden'}>
    {children}
  </div>
);

// Main Profile Page Component
export default function ProfilePage() {
  const [activeTab, setActiveTab] = useState<string>("overview");
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [profileData] = useState<FreelancerData>(freelancerData);
  const [aboutText, setAboutText] = useState(profileData.about);
  
  const { clientReviews, portfolio, skills } = profileData;
  const reviewCount = clientReviews.length;
  const portfolioCount = portfolio.length;
  const skillsCount = skills.length;

  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setAboutText(e.target.value);
  };

  const handleTabChange = (value: string) => {
    setActiveTab(value);
  };

  const handleSaveAbout = () => {
    // In a real app, you would update this on the server
    setIsEditing(false);
  };

  // Render the profile header
  const renderProfileHeader = () => (
    <div className="flex flex-col items-center sm:flex-row gap-4 sm:gap-6 px-4 sm:px-0">
      <div className="relative group w-24 h-24 sm:w-32 sm:h-32">
        <Avatar className="w-full h-full">
          <AvatarImage src="/placeholder-user.jpg" alt={profileData.name} />
          <AvatarFallback className="text-lg sm:text-xl">
            {profileData.name.split(' ').map(n => n[0]).join('')}
          </AvatarFallback>
        </Avatar>
        <div className="absolute inset-0 bg-black/50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
          <Button variant="ghost" size="sm" className="h-8 w-8 rounded-full p-0" aria-label="Change profile picture">
            <Camera className="h-4 w-4 text-white" />
          </Button>
        </div>
      </div>
      <div className="w-full sm:flex-1 text-center sm:text-left px-2 sm:px-0">
        <h1 className="text-xl sm:text-2xl font-bold">{profileData.name}</h1>
        <p className="text-sm sm:text-base text-muted-foreground">{profileData.title}</p>
        
        <div className="flex flex-wrap items-center justify-center sm:justify-start gap-2 mt-2">
          <div className="flex items-center">
            {[...Array(5)].map((_, i) => (
              <Star
                key={i}
                className={`h-3 w-3 sm:h-4 sm:w-4 ${
                  i < Math.floor(profileData.rating) 
                    ? 'fill-purple-500 text-purple-500' 
                    : 'text-muted-foreground/30'
                }`}
              />
            ))}
            <span className="ml-1 sm:ml-2 text-xs sm:text-sm text-muted-foreground">
              {profileData.rating} ({profileData.reviewCount})
            </span>
          </div>
          <Badge variant="outline" className="text-xs sm:text-sm h-5 px-2">
            <div className={`h-2 w-2 rounded-full mr-1 ${
              profileData.online ? 'bg-green-500' : 'bg-muted-foreground/30'
            }`} />
            {profileData.online ? 'Online' : 'Offline'}
          </Badge>
        </div>
        
        <div className="mt-3 flex flex-wrap justify-center sm:justify-start gap-1.5">
          {profileData.skills.slice(0, 4).map((skill, i) => (
            <Badge key={i} variant="secondary" className="text-xs px-2 py-0.5">
              {skill}
            </Badge>
          ))}
          {profileData.skills.length > 4 && (
            <Badge variant="outline" className="text-xs px-2 py-0.5">+{profileData.skills.length - 4} more</Badge>
          )}
        </div>
      </div>
    </div>
  );



  // Render overview tab content
  const renderOverviewTab = (): JSX.Element => (
    <div className="w-full max-w-md mx-auto bg-background min-h-screen flex flex-col overflow-x-hidden">
      {/* Main Content */}
      <main className="flex-1 w-full overflow-y-auto overflow-x-hidden pb-20">
        <div className="w-full px-2 py-3 sm:px-6 sm:py-4">
          <div className="flex items-center justify-between">
            <h3 className="text-base sm:text-lg font-medium">About</h3>
            {!isEditing && (
              <Button
                variant="ghost"
                size="sm"
                className="h-8 px-2 text-xs sm:text-sm"
                onClick={() => setIsEditing(true)}
              >
                <Edit2 className="h-3.5 w-3.5 sm:h-4 sm:w-4 mr-1" />
                Edit
              </Button>
            )}
          </div>
        </div>
        <CardContent className="px-4 pb-4 sm:px-6 sm:pb-6 pt-0">
          {isEditing ? (
            <div className="space-y-4">
              <Textarea
                value={aboutText}
                onChange={handleInputChange}
                className="min-h-[100px] text-sm sm:text-base"
                placeholder="Tell us about yourself..."
              />
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setAboutText(profileData.about);
                    setIsEditing(false);
                  }}
                >
                  Cancel
                </Button>
                <Button size="sm" onClick={handleSaveAbout}>
                  Save Changes
                </Button>
              </div>
            </div>
          ) : (
            <p className="text-sm sm:text-base text-muted-foreground whitespace-pre-line">
              {aboutText || 'No description provided.'}
            </p>
          )}
        </CardContent>
      </main>
    </div>
  );

  // Render portfolio tab content
  const renderPortfolioTab = () => (
    <div className="space-y-6 pb-20">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Portfolio ({portfolio.length} projects)</h3>
        <Button variant="outline" size="sm" className="gap-2">
          <Plus className="h-4 w-4" />
          Add Project
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {portfolio.map((item) => (
          <div key={item.id} className="group relative rounded-lg overflow-hidden border">
            <div className="aspect-video bg-muted/50 relative">
              <Image
                src={item.image}
                alt={item.title}
                fill
                className="object-cover group-hover:scale-105 transition-transform"
              />
              <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                <Button variant="ghost" size="sm" className="rounded-full bg-background/80 hover:bg-background w-8 h-8 p-0">
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
            <div className="p-4">
              <h4 className="font-medium">{item.title}</h4>
              <p className="text-sm text-muted-foreground">{item.category}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Render the tab content based on active tab
  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Response Time</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{profileData.responseTime}</div>
                  <p className="text-xs text-muted-foreground">Average response time</p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Delivery Time</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{profileData.deliveryTime}</div>
                  <p className="text-xs text-muted-foreground">Average delivery time</p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Completion Rate</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{profileData.completionRate}%</div>
                  <div className="mt-2">
                    <Progress value={profileData.completionRate} className="h-2" />
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>About</CardTitle>
              </CardHeader>
              <CardContent>
                {isEditing ? (
                  <div className="space-y-4">
                    <Textarea
                      value={aboutText}
                      onChange={handleInputChange}
                      className="min-h-[150px]"
                    />
                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" size="sm" className="h-8 text-xs" onClick={() => setIsEditing(false)}>
                        Cancel
                      </Button>
                      <Button size="sm" className="h-8 text-xs" onClick={handleSaveAbout}>Save</Button>
                    </div>
                  </div>
                ) : (
                  <div>
                    <p className="text-muted-foreground">{aboutText}</p>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="mt-2 h-8 text-xs"
                      onClick={() => setIsEditing(true)}
                    >
                      <Edit2 className="h-4 w-4 mr-2" />
                      Edit
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

            <div>
              <h2 className="text-xl font-semibold mb-4">Services</h2>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {profileData.services.map((service) => (
                  <Card key={service.id} className="h-full flex flex-col">
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <CardTitle className="text-lg">{service.title}</CardTitle>
                        <Badge variant={service.type === 'online' ? 'default' : 'secondary'}>
                          {service.type}
                        </Badge>
                      </div>
                      <div className="text-2xl font-bold">{service.price}</div>
                      <p className="text-sm text-muted-foreground">
                        Delivery in {service.deliveryTime}
                      </p>
                    </CardHeader>
                    <CardContent className="flex-1">
                      <p className="text-sm mb-4">{service.description}</p>
                      <ul className="space-y-2">
                        {service.features.map((feature, i) => (
                          <li key={i} className="flex items-start">
                            <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                            <span className="text-sm">{feature}</span>
                          </li>
                        ))}
                      </ul>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full" variant="outline">
                        <Edit2 className="h-4 w-4 mr-2" />
                        Edit Service
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </div>
          </div>
        );
      case 'portfolio':
        return (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {profileData.portfolio.map((item) => (
              <Card key={item.id} className="group relative overflow-hidden">
                <div className="aspect-video relative">
                  <Image
                    src={item.image}
                    alt={item.title}
                    fill
                    className="object-cover"
                  />
                  <div className="absolute inset-0 bg-black/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                    <Button variant="ghost" size="sm" className="text-white">
                      <Eye className="h-4 w-4 mr-2" />
                      View
                    </Button>
                  </div>
                </div>
                <CardContent className="p-4">
                  <h3 className="font-medium">{item.title}</h3>
                  <p className="text-sm text-muted-foreground">{item.category}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        );
      case 'reviews':
        return (
          <div className="space-y-6">
            {profileData.clientReviews.map((review) => (
              <Card key={review.id}>
                <CardHeader>
                  <div className="flex justify-between">
                    <div>
                      <h3 className="font-medium">{review.author}</h3>
                      <p className="text-sm text-muted-foreground">{review.date}</p>
                    </div>
                    <div className="flex">
                      {[...Array(5)].map((_, i) => (
                        <Star
                          key={i}
                          className={`h-4 w-4 ${
                            i < review.rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'
                          }`}
                        />
                      ))}
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">{review.comment}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        );
      case 'availability':
        return (
          <div>
            <h2 className="text-xl font-semibold mb-6">Weekly Availability</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-7 gap-4">
              {profileData.availability.map((day) => (
                <div key={day.day} className="space-y-2">
                  <div className="font-medium text-center">{day.day}</div>
                  <div className={`h-20 rounded-lg flex items-center justify-center ${
                    day.available ? 'bg-green-100 dark:bg-green-900/30' : 'bg-gray-100 dark:bg-gray-800'
                  }`}>
                    <span className="text-sm font-medium">
                      {day.available ? 'Available' : 'Unavailable'}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
      case 'settings':
        return (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Profile Settings</CardTitle>
                <CardDescription>Update your profile information and settings</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label>Name</Label>
                  <Input defaultValue={profileData.name} />
                <CardDescription>Manage your account settings</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label>Email</Label>
                  <Input type="email" placeholder="Enter your email" />
                </div>
                <div className="space-y-2">
                  <Label>New Password</Label>
                  <Input type="password" placeholder="Enter new password" />
                </div>
                <div className="space-y-2">
                  <Label>Confirm New Password</Label>
                  <Input type="password" placeholder="Confirm new password" />
                </div>
                <div className="pt-2">
                  <Button>Update Account</Button>
                </div>
              </CardContent>
            </Card>
          </div>
        );
      default:
            >
              Portfolio
              <span className="ml-2 rounded-full bg-muted px-2 py-0.5 text-xs">
                {portfolioCount}
              </span>
            </TabsTrigger>
            <TabsTrigger 
              value="reviews" 
              className="relative rounded-none border-b-2 border-transparent px-4 py-2 text-sm font-medium text-muted-foreground transition-all hover:text-foreground data-[state=active]:border-primary data-[state=active]:text-foreground"
            >
              Reviews
              <span className="ml-2 rounded-full bg-muted px-2 py-0.5 text-xs">
                {reviewCount}
              </span>
            </TabsTrigger>
            <TabsTrigger 
              value="availability" 
              className="py-2 text-xs px-1 h-full rounded-none border-b-2 border-transparent data-[state=active]:border-purple-500 data-[state=active]:shadow-none"
            >
              <span className="truncate">Schedule</span>
            </TabsTrigger>
            <TabsTrigger 
              value="settings" 
              className="py-2 text-xs px-1 h-full rounded-none border-b-2 border-transparent data-[state=active]:border-purple-500 data-[state=active]:shadow-none"
            >
              <span className="truncate">Settings</span>
            </TabsTrigger>
          </TabsList>

          <div className="mt-6">
            {renderTabContent()}
          </div>
        </Tabs>
      </div>
      
      {/* Bottom Navigation */}
      <nav className="fixed bottom-0 left-0 right-0 bg-card border-t h-16 flex items-center max-w-md mx-auto w-full">
        <div className="w-full flex justify-around">
          <Button variant="ghost" size="sm" className="flex flex-col items-center h-14 w-full rounded-none">
            <Briefcase className="h-5 w-5" />
            <span className="text-xs mt-1">Jobs</span>
          </Button>
          <Button variant="ghost" size="sm" className="flex flex-col items-center h-14 w-full rounded-none">
            <MessageSquare className="h-5 w-5" />
            <span className="text-xs mt-1">Messages</span>
          </Button>
          <Button variant="ghost" size="sm" className="flex flex-col items-center h-14 w-full rounded-none text-purple-500">
            <span className="bg-purple-500/10 rounded-full p-2">
              <User className="h-5 w-5" />
            </span>
            <span className="text-xs mt-1">Profile</span>
          </Button>
        </div>
      </nav>
    </div>
  );
};

export default App;